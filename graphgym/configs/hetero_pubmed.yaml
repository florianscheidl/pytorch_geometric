# The recommended basic settings for GNN
out_dir: results
dataset:
  format: PyG
  name: PubMed # for TUDatasets, the right format is TU_{name}, e.g. TU_MUTAG, TU_PTC_FM, TU_PROTEINS,
  task: node
  task_type: classification
  transductive: true # since we are doing node!
  split: [0.8, 0.1, 0.1] # for graph tasks, the split is loader (create_loader()).
  pre_transform: "lift_and_wire"
  transform: None # none
lift:
  data_model: cell_complex # alternatively: simplicial_complex
  init_edges: True
  init_rings: True
  init_method: sum
  method: rings
  max_induced_cycle_length: 5
wiring:
  adjacency_types: ["boundary","upper"]
train:
  batch_size: 8
  eval_period: 50 # what does this mean?
  ckpt_period: 100 # what does this mean?
  iter_per_epoch: 96 # hyperparameter
  node_per_graph: 96 # hyperparameter
model:
  type: gnn
  loss_fun: cross_entropy # mse
  graph_pooling: hetero_add_pooling # type_readout
gnn:
  graph_type: "hetero"
  layers_pre_mp: 0 # would still need to change code to use HeteroLinear here.
  layers_mp: 2 # hyperparameter search
  layers_post_mp: 1 # hyperparameter search
  dim_inner: 16 # give as list of length # total layers - 1 or dict {pre_inner: [], mp_inner: [], post_inner: []}
  layer_type: hanconv # hanconv # requires graph_type == hetero
  stage_type: stack # skipconcat
  batchnorm: false # hyperparameter search
  act: prelu # hyperparameter search
  dropout: 0.4 # Hyperparameter search
  agg: add # type_specific_aggregation: at the moment, aggregations ignore types and other information!
  normalize_adj: false # not sure if applicable
optim:
  optimizer: adam
  base_lr: 0.01
  max_epoch: 200